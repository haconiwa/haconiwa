# -*- mode: ruby -*-
Haconiwa.define do |config|
  suffix = ENV["SUFFIX"] || UUID.secure_uuid("%x%x")

  # The container name and container's hostname:
  config.name = "haconiwa-#{suffix}"
  # The first process when invoking haconiwa run:
  config.init_command = ["/bin/sleep", (ENV['SLEEP'] || (30 + (UUID.secure_uuid("%d").to_i / 256).floor).to_s)]
  # If your first process is a daemon, please explicitly daemonize by:
  config.daemonize!

  config.command.set_stdout(file: "/tmp/test.stdout")
  # config.command.set_stdout(file: "/var/run/fifotest.pipe")
  config.command.set_stderr(file: "/tmp/test.stderr")

  # The rootfs location on your host OS
  # Pathname class is useful:
  root = Pathname.new("/var/lib/haconiwa/8cfccb3d")
  config.chroot_to root

  # The bootstrap process...
  # Choose lxc or debootstrap:
  config.bootstrap do |b|
    b.strategy = "git"
    b.git_url = "https://github.com/haconiwa/haconiwa-image-php-tester"

    # b.strategy = "debootstrap"
    # b.variant = "minbase"
    # b.debian_release = "jessie"
  end
  # Check that the required binary is installed(lxc-create / debootstrap)

  # The provisioning process...
  # You can declare run_shell step by step:
  config.provision do |p|
    p.run_shell <<-SHELL
apk add --update bash
    SHELL
  end

  # mount point configuration:
  config.add_mount_point "tmpfs", to: root.join("tmp"), fs: "tmpfs"

  # more mount point configuration example:
  # config.add_mount_point root, to: root, readonly: true
  # config.add_mount_point "/lib64", to: root.join("lib64"), readonly: true

  # Re-mount specific filesystems under new container namespace
  # These are recommended when namespaces such as pid and net are unshared:
  config.mount_independent "procfs"
  config.mount_independent "sysfs"
  config.mount_independent "devtmpfs"
  config.mount_independent "devpts"
  config.mount_independent "shm"

  # The namespaces to unshare:
  config.namespace.unshare "mount"
  config.namespace.unshare "ipc"
  config.namespace.unshare "uts"
  config.namespace.unshare "pid"

  # You can use existing namespace via symlink file. e.g.:
  # config.namespace.enter "net", via: "/var/run/netns/sample001"

  # The cgroup configuration example:
  # config.cgroup["cpu.cfs_period_us"] = 100000
  # config.cgroup["cpu.cfs_quota_us"]  =  30000

  # The linux capability blacklist
  # These are useful when you run container as root:
  # config.capabilities.drop "cap_sys_time"
  # config.capabilities.drop "cap_kill"

  # When you use whitelist capability, set:
  # config.capabilities.allow "cap_sys_admin"

  # Specify uid/gid who owns container process:
  # config.uid = "vagrant"
  # config.gid = "vagrant"

  # The resource limit:
  # config.resource.set_limit(:CPU, 10 * 60)
  # config.resource.set_limit(:NOFILE, 30)

  # More examples and informations, please visit:
  # https://github.com/haconiwa/haconiwa/tree/master/sample
  # Enjoy your own container!

  config.add_general_hook :before_fork do |base|
    hostname = `hostname`.chomp
    system "curl -dchannel='#bot-test' -dmessage='From before_fork... [#{base.pid}]@#{hostname}' takosan.pepabo.com:4980/notice"
  end

  config.add_general_hook :before_start_wait do |base|
    hostname = `hostname`.chomp
    Haconiwa::Logger.info "From before_start_wait... #{hostname}"
    system "curl -dchannel='#bot-test' -dmessage='From before_start_wait... [#{base.pid}]@#{hostname}' takosan.pepabo.com:4980/notice"
  end

  config.add_async_hook(sec: 5, interval_msec: 5 * 1000) do |base|
    hostname = `hostname`.chomp
    system "curl -dchannel='#bot-test' -dmessage='From hook... [#{base.pid}]@#{hostname}' takosan.pepabo.com:4980/notice"
    #Haconiwa::Logger.info "Notify: " + `curl -dchannel='#bot-test' -dmessage='From hook... [#{base.pid}]@#{hostname}' takosan.pepabo.com:4980/notice`.chomp
    Haconiwa::Logger.info("This is a hook!!!1: [#{base.pid}]@#{hostname}")
  end
end
